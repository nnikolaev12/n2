(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1586507193969;

	const files = [
		"service-worker-index.html",
		"android-chrome-72x72.png",
		"apple-touch-icon.png",
		"browserconfig.xml",
		"css/animate.css",
		"css/bootstrap.min.css",
		"css/font-awesome.min.css",
		"css/global.css",
		"css/magnific-popup.css",
		"css/style.css",
		"favicon-16x16.png",
		"favicon-32x32.png",
		"favicon.ico",
		"fonts/FontAwesome.otf",
		"fonts/fontawesome-webfont.eot",
		"fonts/fontawesome-webfont.svg",
		"fonts/fontawesome-webfont.ttf",
		"fonts/fontawesome-webfont.woff",
		"fonts/fontawesome-webfont.woff2",
		"img/background.webp",
		"img/logo.webp",
		"img/nikolay-nikolaev.webp",
		"img/projects/colins-sash-windows-website.webp",
		"img/projects/kmd-project-website.webp",
		"img/projects/naturalcare4u-blog-website.webp",
		"img/projects/poker-academy-website.webp",
		"img/projects/pontus-overseas-website.webp",
		"img/projects/sematigo-website.webp",
		"img/projects/sleeprestfully-blog.webp",
		"img/projects/termo-lider-website.webp",
		"img/projects/ultimate-poker-coaching-website.webp",
		"js/bootstrap.min.js",
		"js/jquery.magnific-popup.js",
		"js/jquery.min.js",
		"js/jquery.particleground.min.js",
		"js/main.js",
		"js/wow.min.js",
		"mstile-150x150.png",
		"safari-pinned-tab.svg",
		"site.webmanifest"
	];

	const shell = [
		"client/client.42e453ec.js",
		"client/_projects.f7c63ee5.js",
		"client/index.40009213.js",
		"client/portfolio.e434a953.js",
		"client/sapper-dev-client.89e34bae.js",
		"client/client.967c4e1f.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
